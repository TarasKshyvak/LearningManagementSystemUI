import React from 'react';
import { Container, Typography } from '@mui/material';

const Content = () => {
    return (
        <Typography sx={{ textAlign: 'left' }}>
            О чем нужно помнить перед началом работ по оптимизации
            Перед началом работ по оптимизации, необходимо учитывать два важных фактора.

            Во-первых, ваше приложение не должно потерять в функциональности. Для защиты от регрессии у вас должен быть набор интеграционных или end-to-end тестов, который подтвердит что изменения не сломали ваш функционал. Это справедливо для любого рефакторинга.

            Во-вторых, при любых оптимизациях обязательно опирайтесь на метрики. Вы должны зафиксировать значения до внесения изменений, чтобы убедится, что вы сделали лучше, а не хуже. Даже самые простые и на первый взгляд предсказуемые изменения могут привести к неожиданной деградации производительности, в чем мы с вами убедимся во время одного из тестов.

            System under test
            Для проверки разных рекомендаций мы будем использовать урезанную версию CMS (ASP NET Core API и Entity Framework Core), основанную на тестовой базе Microsoft (Adventureworks), которая может возвращать товары и заказы. Приложение будет похоже на большинство веб-сервисов, которые принимают запросы и что-то возвращают из базы данных. База и другие зависимости будут разворачиваться командой docker compose up. В качестве инструмента нагрузочного тестирования мы будем использовать Nbomber, а в качестве инструмента мониторинга dotnet counters и PerfView. Код всех рассматриваемых примеров и нагрузочных тестов доступен на GitHub по ссылке.

            Стоит также отметить что приведенные в статье результаты тестов и оптимизаций будут уникальны для конфигурации OS и железа на котором проводилось нагрузочное тестирование. Их цель дать оценку тому эффекту, который можно ожидать от того или иного изменения. Для вашей системы и вашей конфигурации железа цифры будут отличаться. Всегда подтверждайте позитивный (или негативный) эффект от внесенных изменений на конфигурации, максимально приближенной к вашему проду.

            Рекомендация 1: Используйте последнюю версию фреймворка и библиотек
            Выпуская новые версии NET а также связанных фреймворков и библиотек, таких как ASP NET Core и Entity Framework Core, Microsoft не только расширяет API и вводит новые фичи, но и постоянно работает над улучшением производительности. Оптимизируется использование памяти, существующие API расширяются поддержкой copy-free типов, таких как Span, Memory, расширяется поддержка ValueTask и т.д. За работами по оптимизации можно наблюдать на GitHub по issues с соответствующими тегами (например для ASP NET и для Runtime). Читая release notes каждой новой версии можно сделать вывод - фреймворк становится быстрее.

            Обновление версии фреймворка может быть как быстрым и безопасным (изменить значение TargetFramework в конфигурации проекта и обновить версии библиотек в NuGet), так и достаточно непредсказуемым и сложным процессом, требующим некоторых изменений в коде, адаптации API новых версий библиотек, исправления появившихся ошибок и т.д. Для принятия решения о переводе проекта на новую версию фреймворка лидеру команды необходимо понимать какой это принесет результат, насколько это улучшит производительность. Проведем тестирование и постараемся ответить на этот вопрос.

            Для теста нам понадобится два API проекта с разными LTS версиями фреймворка (Core 3.1 и NET 6), код которых будет идентичен. Будем тестировать два метода:
        </Typography>
    );
};

export default Content;